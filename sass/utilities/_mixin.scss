// BEM selectors


@mixin lo($bo){
	font-size: $bo;
}

@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Generate modifier color classes

@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;    
		}
	}
}

// Generate modifier color classes

@mixin grid-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme}.theme__colors {
			background-color: $color;
			text-align: left;
			padding-left: em(15px);		
			color: getColor(grey);
			font-weight: $font-weight--bold;
		}
	}
}

// Grid Columns
     
@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width);  
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
    
    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Media queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
   @else {
   	@error "Whoops! No value could be retrieved for `#{$break}`. "
  }
}


// Flexbox



@mixin flexbox($disp: flex, $flx-dir: null, $jus-con: null, $mrg: null) {
  display: $disp;
  flex-direction: $flx-dir;
  margin: $mrg;
  justify-content: $jus-con;
  @content;
}